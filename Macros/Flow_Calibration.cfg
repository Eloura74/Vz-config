#########################################
###### CALIBRAGE DU MULTIPLICATEUR D'ÉCOULEMENT ######
#########################################
# Écrit par Frix_x#0161 #
# @version: 1.6

# JOURNAL DES MODIFICATIONS :
#   v1.6 : ajout direct de la définition [gcode_arcs] dans ce fichier pour simplifier l'installation
#   v1.5 : déplacement des notes d'installation dans un fichier markdown approprié : docs > features > flow_calibration.md
#   v1.4 : correction du problème lorsque extrude_factor != 1
#   v1.3 : correction de l'enregistrement des données
#   v1.2 : correction pour ceux qui utilisent une extrusion absolue, ce qui entraîne une erreur
#   v1.1 : ajout du contrôle du ventilateur de refroidissement et quelques optimisations de vitesse
#   v1.0 : premier macro de calibrage d'écoulement

# -------------------------------------------------------------------------------------------------------------------------
# Si vous souhaitez l'utiliser dans votre propre configuration, veuillez l'installer en tant que macro autonome comme décrit dans la
# section d'installation de ce fichier : docs > features > flow_calibration.md
# -------------------------------------------------------------------------------------------------------------------------

### Qu'est-ce que c'est ? ###
# La principale raison de cet ensemble de macros est d'obtenir un moyen de calibrer le multiplicateur d'extrusion d'écoulement indépendant du filament et du trancheur.
# L'objectif est de le rendre facile à régler, partager et utiliser.

# Cette macro est paramétrique et la plupart des valeurs peuvent être ajustées avec leurs paramètres d'entrée respectifs.
# Elle peut être appelée sans aucun paramètre - auquel cas les valeurs par défaut seraient utilisées - ou avec n'importe quelle combinaison de paramètres souhaitée.

# N'hésitez pas à me contacter sur Discord (Frix_x#0161) si vous avez besoin d'aide ou si vous avez des commentaires pour l'améliorer :)


# ===========================================================================================================
# NE MODIFIEZ PAS CES VARIABLES (elles sont utilisées en interne par la macro de calibrage d'écoulement)
[gcode_macro _FLOW_CALIB_VARIABLES]
variable_last_shell_thickness: 0.0
variable_last_evalue: 0.0
gcode:


#[gcode_arcs]
#resolution: 0.1

[gcode_macro FLOW_MULTIPLIER_CALIBRATION]
description: Imprime une petite tour pour calibrer le multiplicateur d'écoulement d'extrusion en mesurant la coquille
gcode:
    #
    # PARAMÈTRES
    #
    {% set do_raft = params.DO_RAFT|default(1)|int %} # indique s'il faut imprimer un raft ou non
    {% set do_retract = params.DO_RECTRACT|default(0)|int %} # indique s'il faut activer la rétraction/dérétraction sur les déplacements
    {% set print_size = params.PRINT_SIZE|default(40)|int %} # taille de l'objet imprimé sur le plateau de construction
    {% set print_height = params.HEIGHT|default(15)|int %} # hauteur de l'objet imprimé
    {% set corner_radius = params.CORNER_RADIUS|default(8)|int %} # rayon des coins pour lisser la coque et le trajet de l'outil
    {% set number_of_perimeters = params.PERIMETERS|default(2)|int %} # nombre de périmètres pour imprimer la coque
    {% set fan_speed = params.FAN_SPEED|default(20)|int %} # vitesse du ventilateur de refroidissement en pourcentage (0-100)

    {% set e_multiplier = params.EXTRUSION_MULTIPLIER|default(1.00)|float %} # multiplicateur d'extrusion pour la coque
    {% set filament_diameter = params.FILAMENT_DIAMETER|default(1.75)|float %} # diamètre du filament
    {% set extrusion_width = params.EXTRUSION_WIDTH|default(0.4)|float %} # largeur d'extrusion souhaitée pour une ligne
    {% set layer_height = params.LAYER_HEIGHT|default(0.2)|float %} # hauteur de couche pour l'impression

    {% set retract_length = params.RETRACT_LENGTH|default(0.5)|float %} # quantité de rétraction lors des déplacements entre les mouvements d'impression
    {% set initial_purge = params.PURGE_MM|default(1)|int %} # mm de filament à purger avant l'impression. Réglez sur 0 pour désactiver
    {% set z_hop_height  = 2 * layer_height %}

    {% set feedrate_print = params.CONTROL_SPEED|default(100)|int * 60 %} # vitesse d'impression
    {% set feedrate_travel = params.TRAVEL_SPEED|default(200)|int * 60 %} # vitesse de déplacement entre les mouvements d'impression
    {% set feedrate_raft = params.RAFT_SPEED|default(60)|int * 60 %} # vitesse d'impression pour l'impression du raft
    {% set feedrate_z = params.Z_LIFT_SPEED|default(20)|int * 60 %} # vitesse de déplacement de l'axe Z
    {% set feedrate_retract = params.RETRACT_SPEED|default(50)|int * 60 %} # vitesse de rétraction et de dérétraction

    #
    # VALEURS CALCULÉES
    #
    {% set e_per_mm = ((extrusion_width - layer_height) * layer_height + 3.14159 * (layer_height / 2)**2) / (3.14159 * (filament_diameter / 2)**2) %} # facteur E calculé (similaire à Slic3r/PrusaSlicer/SuperSlicer)
    {% set spacing = extrusion_width - layer_height * (1 - 3.14159 / 4) %} # espacement des lignes pendant l'impression
    {% set shell_thickness = extrusion_width + (number_of_perimeters|float - 1) * spacing %} # épaisseur théorique de la coque

    {% set max_x = printer.toolhead.axis_maximum.x|float %}
    {% set max_y = printer.toolhead.axis_maximum.y|float %}
    {% set x_start = max_x / 2 - print_size / 2 %}
    {% set y_start = max_y / 2 - print_size / 2 %}
    {% set x_end = x_start + print_size %}
    {% set y_end = y_start + print_size %}

    {% set num_raft_lines = ([print_size, max_x]|min / spacing)|round(0, 'floor')|int %}
    {% set raft_size = num_raft_lines * spacing %}

    #
    # DÉBUT...
    #

    {action_respond_info("")}
    {action_respond_info("Starting extrusion flow calibration print")}
    {action_respond_info("This operation can not be interrupted by normal means. Hit the \"emergency stop\" button to stop it if needed")}
    {action_respond_info("")}
    {action_respond_info("Exrusion multiplier used: %.4f" % e_multiplier)}
    {action_respond_info("Number of perimeters to print: %d" % number_of_perimeters)}
    {action_respond_info("THEORIC SHELL THICKNESS: %.4f" % shell_thickness)}
    {action_respond_info("")}
    {action_respond_info("Measure the shell thickness using a caliper or micrometer. Then call the computation macro with the measured value:")}
    {action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
    {action_respond_info("")}

    SAVE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION

   #
    # définir les variables pour les calculs ultérieurs
    #
    SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_shell_thickness VALUE={shell_thickness}
    SET_GCODE_VARIABLE MACRO=_FLOW_CALIB_VARIABLES VARIABLE=last_evalue VALUE={e_multiplier}

    #
    # purge avant le raft
    #
    G90
    M83
    G92 E0.0
    G0 X{x_start} Y{y_start - 5} Z{layer_height} F{feedrate_travel} # déplacement à la position de départ pour créer une ligne de purge

    G91 # utiliser des coordonnées relatives pour la ligne d'amorçage
    G1 E{initial_purge} F{5 * 60}
    G1 X{raft_size} E{raft_size * e_per_mm * 1.5} F{feedrate_raft / 2} # imprimer la ligne d'amorçage
    G1 Y-{extrusion_width} E{extrusion_width * e_per_mm} F{feedrate_raft / 2} # déplacer vers la ligne suivante
    G1 X-{raft_size} E{raft_size * e_per_mm} F{feedrate_raft / 2} # imprimer la deuxième ligne d'amorçage

    G1 E-{retract_length} F{feedrate_retract} # rétracter
    G0 Z{z_hop_height} F{feedrate_z} # saut en Z

    G90 # retour aux coordonnées absolues
    G0 X{x_start} Y{y_start} F{feedrate_travel} # déplacement à la position de départ
    G1 Z{layer_height} F{feedrate_z} # déplacement à la hauteur d'impression
    G1 E{retract_length} F{feedrate_retract} # désactiver la rétraction

    # définir le facteur d'extrusion
    M221 S{e_multiplier * 100}

    #
    # imprimer le raft
    #
    {% if do_raft == 1 %}
        G91 # utiliser des coordonnées relatives pour le raft
        {% for curr_raft_line in range(1, num_raft_lines + 2) %}
            # imprimer une ligne de raft avec une direction alternée
            G1 Y{loop.cycle(1.0, -1.0) * raft_size} E{raft_size * e_per_mm} F{feedrate_raft}

            # mouvement d'espacement
            {% if not loop.last %}
                G1 X{spacing} E{spacing * e_per_mm} F{feedrate_raft}
            {% endif %}
        {% endfor %}

        G1 E-{retract_length} F{feedrate_retract} # rétracter
        G0 Z{z_hop_height} F{feedrate_z} # saut en Z
        G90 # retour aux coordonnées absolues
    {% endif %}

    #
    # imprimer la coque
    #
    G90
    M106 S{fan_speed * 255 / 100}

    # pour chaque couche
    {% for curr_layer in range(1, (print_height / layer_height)|round|int) %}
        G0 X{x_start + corner_radius} Y{y_start} F{feedrate_travel} # déplacement à la position de départ en XY
        G1 Z{(curr_layer * layer_height) + (layer_height if do_raft == 1 else 0)} F{feedrate_z} # déplacement à la position de départ en Z

        # imprimer une couche de la coque (dans une boucle pour tous les périmètres d'une couche)
        {% for perim_num in range(number_of_perimeters) %}
            # calculer les valeurs pour le périmètre actuel (décalage et rayon)
            {% set perim_offset = perim_num * spacing %}
            {% set perim_radius = corner_radius - (perim_num * spacing) %}
            
            # position de départ du périmètre actuel
            G1 X{x_start + corner_radius} Y{y_start + perim_offset} F{feedrate_travel}
            {% if do_retract == 1 %}
                G1 E{retract_length} F{feedrate_retract} # désactiver la rétractation
            {% endif %}

            # imprimer le périmètre en utilisant le décalage et le rayon calculés
            G1 X{x_end - corner_radius} Y{y_start + perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
            G3 X{x_end - perim_offset} Y{y_start + corner_radius} J{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
            G1 X{x_end - perim_offset} Y{y_end - corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
            G3 X{x_end - corner_radius} Y{y_end - perim_offset} I-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
            G1 X{x_start + corner_radius} Y{y_end - perim_offset} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
            G3 X{x_start + perim_offset} Y{y_end - corner_radius} J-{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}
            G1 X{x_start + perim_offset} Y{y_start + corner_radius} E{(print_size - (2 * corner_radius)) * e_per_mm} F{feedrate_print}
            G3 X{x_start + corner_radius} Y{y_start + perim_offset} I{perim_radius} E{(3.14159 / 2) * perim_radius * e_per_mm} F{feedrate_print}

            {% if do_retract == 1 %}
                G1 E-{retract_length} F{feedrate_retract} # rétracter
            {% endif %}
        {% endfor %}

        {% if do_retract == 1 %}
            G91
            G0 Z{z_hop_height} F{feedrate_z}
            G90 
        {% endif %}
    {% endfor %}

    #
    # rétracter et s'éloigner
    #
    G1 E-{retract_length} F{feedrate_retract}
    G91
    G0 Z20 F{feedrate_travel}

    RESTORE_GCODE_STATE NAME=STATE_FLOW_MULTIPLIER_CALIBRATION

[gcode_macro COMPUTE_FLOW_MULTIPLIER]
description: Calculer un nouveau coefficient d'extrusion en utilisant l'épaisseur mesurée de la coque sur l'impression de calibration
gcode:
    {% set evalue = params.OLD_EXTRUSION_MULTIPLIER|default(0.0)|float %} # coefficient d'extrusion utilisé pour l'impression de calibration
    {% set theorical_thickness = params.THEORICAL_THICKNESS|default(0.0)|float %} # épaisseur théorique de la coque
    {% set measured_thickness = params.MEASURED_THICKNESS|default(0.0)|float %} # épaisseur mesurée de la coque sur l'impression de calibration

    # si aucun OLD_EXTRUSION_MULTIPLIER n'est passé en paramètre, obtenir celui de la dernière exécution de calibration
    {% if evalue == 0.0 %}
        {% set last_evalue = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_evalue %}
        
        # puis, s'il n'y a pas non plus de valeur evalue enregistrée de la dernière exécution, alerter l'utilisateur
        {% if last_evalue == 0.0 %}
            {action_respond_info("Il semble qu'aucune impression de calibration n'ait été effectuée avant cela (ou qu'un redémarrage de Klipper ait eu lieu).")}
            {action_respond_info("Vous pouvez toujours l'utiliser manuellement en appelant à nouveau ce macro de cette manière :")}
            {action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
            {action_raise_error("pas assez de données pour calculer le nouveau coefficient d'extrusion !")}
        {% else %}
            {% set final_evalue = last_evalue %}
            {action_respond_info("Utilisation de OLD_EXTRUSION_MULTIPLIER : %.3f" % final_evalue)}
        {% endif %}
    {% else %}
        {% set final_evalue = evalue %}
        {action_respond_info("Utilisation de OLD_EXTRUSION_MULTIPLIER : %.3f" % final_evalue)}
    {% endif %}

    # de manière similaire, si aucune THEORICAL_THICKNESS n'est passée en paramètre, obtenir celle de la dernière exécution de calibration
    {% if theorical_thickness == 0.0 %}
        {% set last_shell_thickness = printer["gcode_macro _FLOW_CALIB_VARIABLES"].last_shell_thickness %}

        # puis, s'il n'y a pas non plus d'épaisseur théorique enregistrée de la dernière exécution, alerter l'utilisateur
        {% if last_shell_thickness == 0.0 %}
            {action_respond_info("Il semble qu'aucune impression de calibration n'ait été effectuée avant cela (ou qu'un redémarrage de Klipper ait eu lieu).")}
            {action_respond_info("Vous pouvez toujours l'utiliser manuellement en appelant à nouveau ce macro de cette manière :")}
            {action_respond_info("COMPUTE_FLOW_MULTIPLIER OLD_EXTRUSION_MULTIPLIER=xxx.xxx THEORICAL_THICKNESS=xxx.xxx MEASURED_THICKNESS=xxx.xxx")}
            {action_raise_error("pas assez de données pour calculer le nouveau coefficient d'extrusion !")}
        {% else %}
            {% set final_theorical_thickness = last_shell_thickness %}
            {action_respond_info("Utilisation de THEORICAL_THICKNESS : %.3f" % final_theorical_thickness)}
        {% endif %}
    {% else %}
        {% set final_theorical_thickness = theorical_thickness %}
        {action_respond_info("Utilisation de THEORICAL_THICKNESS : %.3f" % final_theorical_thickness)}
    {% endif %}

    # utiliser l'épaisseur mesurée par l'utilisateur pour calculer un nouveau coefficient d'extrusion
    {% if measured_thickness == 0.0 %}
        {action_respond_info("Vous devez utiliser un pied à coulisse ou un micromètre pour mesurer l'épaisseur de la coque sur l'impression de calibration et appeler ce macro avec la valeur mesurée !!!")}
        {action_respond_info("COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx")}
        {action_raise_error("pas assez de données pour calculer le nouveau coefficient d'extrusion !")}
    {% else %}
        {% set new_evalue = final_theorical_thickness * final_evalue / measured_thickness %}
        {action_respond_info("NOUVELLE VALEUR DE COEFFICIENT D'EXTRUSION CALCULÉE : %.3f" % new_evalue)}
        {action_respond_info("Utilisez cette nouvelle valeur comme coefficient d'extrusion dans votre trancheur préféré")}
        {action_respond_info("")}
    {% endif %}


[gcode_macro FLOW_MULTIPLIER_CALIBRATION_START]
description: 
gcode:
  PRINT_START
  FLOW_MULTIPLIER_CALIBRATION [with the needed args...]
  #COMPUTE_FLOW_MULTIPLIER MEASURED_THICKNESS=xxx.xxx